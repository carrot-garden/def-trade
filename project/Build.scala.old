import sbt._
import Keys._
import Tests._

object Version {
  val Scala = "2.11.0-RC3"
  val Akka = "2.3.0"
//  val Scalaz = "7.0.0-M7"
  val ScalaTest = "2.1.2"
  val ScalaCheck = "1.11.3"
}

object Resolvers {
  val typesafeReleases = "Typesafe Repo" at "http://repo.typesafe.com/typesafe/releases/"
  val typesafeSnapshots = "Typesafe Snapshots" at "http://repo.typesafe.com/typesafe/snapshots/"
}

object Dependencies {
  private val reflection = "org.scala-lang" % "scala-reflect" % Version.Scala % "test"
  private val parserCombinators = "org.scala-lang.modules" %% "scala-parser-combinators" % "1.0.1"
  private val akka = "com.typesafe.akka" %% "akka-actor" % Version.Akka
//  private val agent = "com.typesafe.akka" %% "akka-agent" % Version.Akka
//  private val slf4j = "com.typesafe.akka" %% "akka-slf4j" % Version.Akka
  private val testkit = "com.typesafe.akka" %% "akka-testkit" % Version.Akka % "test"
  private val scalatest = "org.scalatest" %% "scalatest" % Version.ScalaTest % "test"
  private val scalacheck = "org.scalacheck" %% "scalacheck" % Version.ScalaCheck % "test"
  val core = Seq(reflection, parserCombinators, akka, testkit, scalatest, scalacheck)
}

object Settings {
  

  val buildSettings = Defaults.defaultSettings ++ Seq(
    name := "def-trade",
    organization := "com.pvteks",
    version := "0.1-SNAPSHOT",
    scalaVersion := Version.Scala,
    scalacOptions in Compile := Seq("-deprecation", "-feature", "-Xlint"),
    concurrentRestrictions in Global += Tags.limit(Tags.Test, 1))

  import Resolvers._

  val defaultSettings = buildSettings ++ Seq(
    resolvers ++= Seq(typesafeReleases, typesafeSnapshots) // scalacOptions ++= Seq("-whatever", "-etc")
    )

}

object ProjectBuild extends Build {
  
  lazy val root: Project = Project(
    "root",
    file("."),
    settings = Settings.buildSettings) // aggregate(macros, ibScala)

  lazy val macros: Project = Project(
    id = "macros",
    base = file("macros"),
    settings = Settings.buildSettings ++ Seq(
      libraryDependencies <+= (scalaVersion)("org.scala-lang" % "scala-reflect" % _)
  )) 

    // Define a method to group tests, in my case a single test per group
  def singleTests(tests: Seq[TestDefinition]) =
    tests map { test =>
	  new Group(
	      name = test.name,
	      tests = Seq(test),
	      runPolicy = SubProcess(javaOptions = Seq.empty[String]))
	  }

  lazy val ibScala: Project = Project(
    id = "ib-scala",
    base = file("ib-scala"),
    settings = Seq(name := "ib-scala") ++ Settings.defaultSettings ++ Seq(
//      fork in Test := true,
      libraryDependencies ++= Dependencies.core,
      testGrouping in Test := singleTests((definedTests in Test).value))) dependsOn (macros) 
}
